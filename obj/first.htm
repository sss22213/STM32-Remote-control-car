<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\first.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\first.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sat Aug 15 19:34:47 2015
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Euler_angles &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25dc694]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc694]">NMI_Handler</a><BR>
 <LI><a href="#[25dc658]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc658]">HardFault_Handler</a><BR>
 <LI><a href="#[25dc61c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc61c]">MemManage_Handler</a><BR>
 <LI><a href="#[25dc5e0]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc5e0]">BusFault_Handler</a><BR>
 <LI><a href="#[25dc5a4]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc5a4]">UsageFault_Handler</a><BR>
 <LI><a href="#[25dc568]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc568]">SVC_Handler</a><BR>
 <LI><a href="#[25dc52c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc52c]">DebugMon_Handler</a><BR>
 <LI><a href="#[25dc4f0]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc4f0]">PendSV_Handler</a><BR>
 <LI><a href="#[25dc4b4]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc4b4]">SysTick_Handler</a><BR>
 <LI><a href="#[25dc478]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25dc478]">ADC_IRQHandler</a><BR>
 <LI><a href="#[30e865c]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30e865c]">_float_round</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25dc6d0]">Reset_Handler</a>
 <LI><a href="#[25dc694]">NMI_Handler</a>
 <LI><a href="#[25dc658]">HardFault_Handler</a>
 <LI><a href="#[25dc61c]">MemManage_Handler</a>
 <LI><a href="#[25dc5e0]">BusFault_Handler</a>
 <LI><a href="#[25dc5a4]">UsageFault_Handler</a>
 <LI><a href="#[25dc568]">SVC_Handler</a>
 <LI><a href="#[25dc52c]">DebugMon_Handler</a>
 <LI><a href="#[25dc4f0]">PendSV_Handler</a>
 <LI><a href="#[25dc4b4]">SysTick_Handler</a>
 <LI><a href="#[25d379c]">WWDG_IRQHandler</a>
 <LI><a href="#[25d3760]">PVD_IRQHandler</a>
 <LI><a href="#[25d3724]">TAMPER_IRQHandler</a>
 <LI><a href="#[25d36e8]">RTC_IRQHandler</a>
 <LI><a href="#[25d36ac]">FLASH_IRQHandler</a>
 <LI><a href="#[25d3670]">RCC_IRQHandler</a>
 <LI><a href="#[25d3634]">EXTI0_IRQHandler</a>
 <LI><a href="#[25d35f8]">EXTI1_IRQHandler</a>
 <LI><a href="#[25d35bc]">EXTI2_IRQHandler</a>
 <LI><a href="#[25d3580]">EXTI3_IRQHandler</a>
 <LI><a href="#[25d3544]">EXTI4_IRQHandler</a>
 <LI><a href="#[25dc3c4]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[25dc388]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[25dc34c]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[25dc310]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[25dc2d4]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[25dc298]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[25dc25c]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[25dc478]">ADC_IRQHandler</a>
 <LI><a href="#[25d3328]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[25d32ec]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[25d32b0]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[25d3274]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[25d3238]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[25d31fc]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[25d31c0]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[25d3184]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[25d3148]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[25d310c]">TIM2_IRQHandler</a>
 <LI><a href="#[25d30d0]">TIM3_IRQHandler</a>
 <LI><a href="#[25d3094]">TIM4_IRQHandler</a>
 <LI><a href="#[25d3058]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[25d301c]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[25d2fe0]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[25d2fa4]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[25d2f68]">SPI1_IRQHandler</a>
 <LI><a href="#[25d2f2c]">SPI2_IRQHandler</a>
 <LI><a href="#[25d2ef0]">USART1_IRQHandler</a>
 <LI><a href="#[25d2eb4]">USART2_IRQHandler</a>
 <LI><a href="#[25d2e78]">USART3_IRQHandler</a>
 <LI><a href="#[25d2e3c]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[25d2e00]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[25d2dc4]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[25d13c0]">main</a>
 <LI><a href="#[30ead80]">__main</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30ead80]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[30e90e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[25dc5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[30e8fbc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30e838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30e8f80]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30e838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30e8e90]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[25dc6d0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))

<P><STRONG><a name="[25dc694]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc658]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc61c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc5e0]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[30e90e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_stk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc5a4]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc568]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc52c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc4f0]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc4b4]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc478]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25dc478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc3c4]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc388]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc34c]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc310]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc2d4]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc298]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25dc25c]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25db140]"></a>GPIO_DeInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dad44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25db104]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dad44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25db0c8]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Configuration
<LI><a href="#[25d1438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configurataion
</UL>

<P><STRONG><a name="[25db08c]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25db050]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCSR04_TRIG
<LI><a href="#[30eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive14Bytes
<LI><a href="#[30eb53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive12Bytes
<LI><a href="#[30eb578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive6Bytes
<LI><a href="#[30eb5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte_WithACK
<LI><a href="#[30eb5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte
<LI><a href="#[30eb62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendByte
<LI><a href="#[30eb71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_START
</UL>

<P><STRONG><a name="[25db014]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25dafd8]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25daf9c]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25daf60]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Configuration
<LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25d14ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L298N_Control
<LI><a href="#[25d1528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCSR04_TRIG
<LI><a href="#[30eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive14Bytes
<LI><a href="#[30eb53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive12Bytes
<LI><a href="#[30eb578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive6Bytes
<LI><a href="#[30eb5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte_WithACK
<LI><a href="#[30eb5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte
<LI><a href="#[30eb62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendByte
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_STOP
<LI><a href="#[30eb71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_START
</UL>

<P><STRONG><a name="[25daf24]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25d14ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L298N_Control
<LI><a href="#[25d1528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCSR04_TRIG
<LI><a href="#[30eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive14Bytes
<LI><a href="#[30eb53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive12Bytes
<LI><a href="#[30eb578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive6Bytes
<LI><a href="#[30eb5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte_WithACK
<LI><a href="#[30eb5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte
<LI><a href="#[30eb62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendByte
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_STOP
<LI><a href="#[30eb71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_START
</UL>

<P><STRONG><a name="[25daee8]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25daeac]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25dae70]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25dae34]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25dadf8]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25dadbc]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25dad80]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25d9160]"></a>RCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d9124]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d90e8]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[25d90ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[25d90ac]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d90e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d9070]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d9034]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8ff8]"></a>RCC_PLLConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8fbc]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8f80]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8f44]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8f08]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8ecc]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8e90]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8e54]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8e18]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8ddc]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8da0]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8d64]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8d28]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8cec]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8cb0]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25d7db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[25d8c74]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8c38]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Configuration
<LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d8bfc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25dad44]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d694c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[25d7dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[25db104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[25db140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[25d8bc0]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d694c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[25d7dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[25d8b84]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8b48]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8b0c]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8ad0]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8a94]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8a58]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d8698]"></a>FLASH_SetLatency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d865c]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d8620]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25d85e4]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d85a8]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d856c]"></a>FLASH_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d8530]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[25d87c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[25d8314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[25d8350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[25d838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[25d83c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[25d8404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[25d8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[25d847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[25d84b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[25d84f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[25d84f4]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d84b8]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d847c]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d8440]"></a>FLASH_ProgramWord</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d8404]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d83c8]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d838c]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d8350]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d8314]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d82d8]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d829c]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d8260]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d8224]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d81e8]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d81ac]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d8170]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d7dec]"></a>USART_DeInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[25dad44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25d7db0]"></a>USART_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25d8cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configurataion
</UL>

<P><STRONG><a name="[25d7d74]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7d38]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7cfc]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7cc0]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configurataion
</UL>

<P><STRONG><a name="[25d7c84]"></a>USART_ITConfig</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configurataion
</UL>

<P><STRONG><a name="[25d7c48]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7c0c]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7bd0]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7b94]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7b58]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7b1c]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7ae0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25cf368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sendstring
<LI><a href="#[25d2e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
</UL>

<P><STRONG><a name="[25d7aa4]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25cf32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Readstring
<LI><a href="#[25d2e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[25d7a68]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7a2c]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d79f0]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d79b4]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7978]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d793c]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7900]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d78c4]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7888]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25cf32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Readstring
<LI><a href="#[25cf368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sendstring
</UL>

<P><STRONG><a name="[25d784c]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d2e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[25d7810]"></a>USART_GetITStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25d2e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[25d77d4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d7450]"></a>NVIC_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7414]"></a>NVIC_SCBDeInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d73d8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d739c]"></a>NVIC_Init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32f10x_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[25d7360]"></a>NVIC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7324]"></a>NVIC_SETPRIMASK</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d72e8]"></a>NVIC_RESETPRIMASK</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d72ac]"></a>NVIC_SETFAULTMASK</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7270]"></a>NVIC_RESETFAULTMASK</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7234]"></a>NVIC_BASEPRICONFIG</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d71f8]"></a>NVIC_GetCurrentPendingIRQChannel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d71bc]"></a>NVIC_GetIRQChannelPendingBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7180]"></a>NVIC_SetIRQChannelPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7144]"></a>NVIC_ClearIRQChannelPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7108]"></a>NVIC_GetCurrentActiveHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d70cc]"></a>NVIC_GetIRQChannelActiveBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7090]"></a>NVIC_GetCPUID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7054]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d7018]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6fdc]"></a>NVIC_GenerateCoreReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6fa0]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6f64]"></a>NVIC_SystemHandlerConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6f28]"></a>NVIC_SystemHandlerPriorityConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6eec]"></a>NVIC_GetSystemHandlerPendingBitStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6eb0]"></a>NVIC_SetSystemHandlerPendingBit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6e74]"></a>NVIC_ClearSystemHandlerPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6e38]"></a>NVIC_GetSystemHandlerActiveBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6dfc]"></a>NVIC_GetFaultHandlerSources</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d6dc0]"></a>NVIC_GetFaultAddress</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_nvic.o(.text), UNUSED)

<P><STRONG><a name="[25d694c]"></a>TIM_DeInit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d8bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[25dad44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25d6910]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d14b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM2_init
</UL>

<P><STRONG><a name="[25d68d4]"></a>TIM_OC1Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6898]"></a>TIM_OC2Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d685c]"></a>TIM_OC3Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6820]"></a>TIM_OC4Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d67e4]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d67a8]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d676c]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d66b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d6730]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d66b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d66f4]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d6730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[25d676c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[25d67a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[25d67e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[25d6a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[25d6ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[25d6af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[25d6b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[25d66b8]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d6730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[25d676c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[25d6a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[25d6ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[25d667c]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6640]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6604]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d65c8]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d658c]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6550]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d14b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM2_init
</UL>

<P><STRONG><a name="[25d6514]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d64d8]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25d14b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM2_init
</UL>

<P><STRONG><a name="[25d649c]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6460]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6424]"></a>TIM_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d63e8]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d63ac]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d6334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[25d6370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[25d6370]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d63ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[25d6334]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d63ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[25d6a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[25d6ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[25d62f8]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d6280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[25d62bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[25d62bc]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d62f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[25d6280]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d62f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[25d6244]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6208]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d61cc]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6190]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6154]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6118]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d60dc]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d60a0]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6064]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d6028]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5fec]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5fb0]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5f74]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5f38]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5efc]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5ec0]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5e84]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5e48]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5e0c]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5dd0]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5d94]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5d58]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5d1c]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5ce0]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5ca4]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5c68]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5c2c]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5bf0]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5bb4]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5b78]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5b3c]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5b00]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5ac4]"></a>TIM_SelectOCxM</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5a88]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5a4c]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5a10]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d59d4]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5998]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d595c]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5920]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d58e4]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d58a8]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d586c]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5830]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d57f4]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d57b8]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d577c]"></a>TIM_SetClockDivision</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5740]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5704]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d30d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[25d56c8]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d568c]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5650]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5614]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d55d8]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d559c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d5560]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25d310c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[25d5524]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d30d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25d310c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[25d51a0]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d0f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_configature
</UL>

<P><STRONG><a name="[25d5164]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d12d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[25d130c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[25d5128]"></a>SysTick_CounterCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d0f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_configature
<LI><a href="#[25d12d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[25d130c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[25d50ec]"></a>SysTick_ITConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[25d50b0]"></a>SysTick_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[25d5074]"></a>SysTick_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25d12d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[25d130c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[25d39b8]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d397c]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3940]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3904]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d38c8]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d388c]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3850]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3814]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d37d8]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d379c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3760]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3724]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d36e8]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d36ac]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3670]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3634]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d35f8]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d35bc]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3580]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3544]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3508]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d34cc]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3490]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3454]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3418]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d33dc]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d33a0]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3364]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d3328]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d32ec]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d32b0]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3274]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3238]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d31fc]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d31c0]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3184]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3148]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d310c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d5524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[25d5560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d30d0]"></a>TIM3_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25d5524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[25d5704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3094]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d3058]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d301c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2fe0]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2fa4]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2f68]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2f2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2ef0]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2eb4]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2e78]"></a>USART3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d7810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[25d784c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[25d7aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[25d7ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2e3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2e00]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2dc4]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25d2d88]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2d4c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2d10]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2cd4]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2c98]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2c5c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2c20]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2be4]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2ba8]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2b6c]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2b30]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2af4]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2ab8]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2a7c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2a40]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d2a04]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d29c8]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[25d1564]"></a>Euler_angles</STRONG> (Thumb, 608 bytes, Stack size 128 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Euler_angles &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d0f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[25d1000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25d103c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[25d10b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[25d10f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[25d112c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25d1168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25d11a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25d11e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[25d121c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[25d1258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d1528]"></a>HCSR04_TRIG</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCSR04_TRIG &rArr; Delay_us &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d12d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d14ec]"></a>L298N_Control</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L298N_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d14b0]"></a>TM2_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TM2_init &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25d64d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[25d6550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[25d6910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d1474]"></a>NVIC_Configuration</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d739c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d1438]"></a>GPIO_Configurataion</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configurataion &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25db0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d13fc]"></a>RCC_Configuration</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d8620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[25d8698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[25d8bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[25d8c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[25d8e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[25d8ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[25d8f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[25d8f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[25d8f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[25d8fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[25d8ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[25d90ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[25d90e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[25d9124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[25d9160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d13c0]"></a>main</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; Euler_angles &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d0f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_configature
<LI><a href="#[25d1294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configurataion
<LI><a href="#[25d130c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
<LI><a href="#[25d1384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Configuration
<LI><a href="#[25d13fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[25d1438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configurataion
<LI><a href="#[25d1474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[25d14b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM2_init
<LI><a href="#[25d14ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L298N_Control
<LI><a href="#[25d1528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCSR04_TRIG
<LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[25d0f10]"></a>systick_configature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_configature
</UL>
<BR>[Calls]<UL><LI><a href="#[25d5128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[25d51a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d130c]"></a>Delay_Ms</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_Ms &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d5074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetFlagStatus
<LI><a href="#[25d5128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[25d5164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[25d0448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_S
<LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d0448]"></a>Delay_S</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d130c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[25d12d0]"></a>Delay_us</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_us &rArr; SysTick_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25d5074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetFlagStatus
<LI><a href="#[25d5128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[25d5164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCSR04_TRIG
</UL>

<P><STRONG><a name="[25d1294]"></a>USART_Configurataion</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Configurataion &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25d7c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[25d7cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[25d7db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25cf368]"></a>USART_Sendstring</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Sendstring
</UL>
<BR>[Calls]<UL><LI><a href="#[25d7888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25d7ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[25cf32c]"></a>USART_Readstring</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d7888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25d7aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>

<P><STRONG><a name="[25cea44]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[25cea08]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[25ce9cc]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[25ce990]"></a>dmp_set_accel_bias</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[25ce954]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[25ce918]"></a>dmp_get_fifo_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, anbt_dmp_driver.o(.text), UNUSED)

<P><STRONG><a name="[25ce8dc]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[25ce42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[25cf854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[25d10b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce8a0]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce864]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce828]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce7ec]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce7b0]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce774]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce738]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce6fc]"></a>dmp_get_pedometer_step_count</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25ce2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[25ce6c0]"></a>dmp_set_pedometer_step_count</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[25ce684]"></a>dmp_get_pedometer_walk_time</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25ce2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[25ce648]"></a>dmp_set_pedometer_walk_time</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[25ce60c]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[30ea984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce5d0]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[30ea984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce594]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25ce558]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[25ce594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[25ce5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[25ce60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[25ce738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[25ce774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[25ce7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[25ce7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[25ce828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[25ce864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[25ce8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[25ce51c]"></a>dmp_get_enabled_features</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, anbt_dmp_driver.o(.text), UNUSED)

<P><STRONG><a name="[25ce4e0]"></a>dmp_set_interrupt_mode</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, anbt_dmp_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[25d0f4c]"></a>dmp_read_fifo</STRONG> (Thumb, 540 bytes, Stack size 88 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[25ce300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[25cef6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ebdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_SEND_DATA_FUN
</UL>

<P><STRONG><a name="[25ce4a4]"></a>dmp_register_tap_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, anbt_dmp_driver.o(.text), UNUSED)

<P><STRONG><a name="[25ce468]"></a>dmp_register_android_orient_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, anbt_dmp_driver.o(.text), UNUSED)

<P><STRONG><a name="[30ec1a8]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpu_set_gyro_fsr &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ec16c]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpu_set_accel_fsr &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ec130]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpu_set_lpf &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[30ec07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[30ec0f4]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpu_set_int_latched &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[30ec07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[25ce288]"></a>mpu_reset_fifo</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mpu_reset_fifo &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[25ce5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[25ce60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[25d0f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[30ec0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[30ec0b8]"></a>mpu_configure_fifo</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[30ec874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[30ec07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[30ec07c]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ec0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[30ec0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[30ec130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[30ec040]"></a>mpu_set_sample_rate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ec07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[30ec130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
</UL>

<P><STRONG><a name="[30ec004]"></a>mpu_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mpu_set_bypass &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
<LI><a href="#[30ebd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
</UL>

<P><STRONG><a name="[30ebfc8]"></a>mpu_set_sensors</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_ms
<LI><a href="#[30ec0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ebf8c]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ec004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[30ec874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ebf50]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[25ce3b4]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ebf14]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ebed8]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ebe9c]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ebe60]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[25ce378]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25ce990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[30ebe24]"></a>mpu_run_self_test</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mpu_run_self_test &rArr; get_st_biases &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[30ebe9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[30ebed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[30ebf14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[30ebf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[30ebfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[30ec0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[30ec130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[30ec16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[30ec1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[30ec838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>
<BR>[Called By]<UL><LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[25ce24c]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mpu_write_mem &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[25ce4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[25ce594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[25ce5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[25ce60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[25ce648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_walk_time
<LI><a href="#[25ce6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_step_count
<LI><a href="#[25ce738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[25ce774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[25ce7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[25ce7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[25ce828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[25ce864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[25ce8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[25ce954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[25ce990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[25ce9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[25cea08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
</UL>

<P><STRONG><a name="[25ce2c4]"></a>mpu_read_mem</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu_read_mem &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[25ce684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_walk_time
<LI><a href="#[25ce6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_step_count
</UL>

<P><STRONG><a name="[25ce300]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[25d0f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[25ce33c]"></a>mpu_load_firmware</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[30ea72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[25cea44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[30ebde8]"></a>AnBT_DMP_MPU6050_DEV_CFG</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AnBT_DMP_MPU6050_DEV_CFG &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25d7ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[30ea8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
<LI><a href="#[30ebd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_ms
<LI><a href="#[30ebfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[30ec004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[30ec0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[30ec130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[30ec16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[30ec1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[25d1348]"></a>AnBT_DMP_MPU6050_Init</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AnBT_DMP_MPU6050_Init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; get_st_biases &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[25ce954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[25cea08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[25cea44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[25cf368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Sendstring
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[30ebfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[30ec0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[30ec6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30ebdac]"></a>AnBT_DMP_MPU6050_SEND_DATA_FUN</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d0f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[30eb758]"></a>ANBT_I2C_Delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, anbt_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Configuration
<LI><a href="#[30eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive14Bytes
<LI><a href="#[30eb53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive12Bytes
<LI><a href="#[30eb578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive6Bytes
<LI><a href="#[30eb5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte_WithACK
<LI><a href="#[30eb5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte
<LI><a href="#[30eb62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendByte
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_STOP
<LI><a href="#[30eb71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_START
</UL>

<P><STRONG><a name="[25d1384]"></a>ANBT_I2C_Configuration</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ANBT_I2C_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d8c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30eb71c]"></a>ANBT_I2C_START</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANBT_I2C_START
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>

<P><STRONG><a name="[30eb6e0]"></a>ANBT_I2C_STOP</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANBT_I2C_STOP
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>

<P><STRONG><a name="[30eb6a4]"></a>ANBT_I2C_SendACK</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive14Bytes
<LI><a href="#[30eb53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive12Bytes
<LI><a href="#[30eb578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive6Bytes
<LI><a href="#[30eb5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte_WithACK
</UL>

<P><STRONG><a name="[30eb668]"></a>ANBT_I2C_SendNACK</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANBT_I2C_SendNACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive14Bytes
<LI><a href="#[30eb53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive12Bytes
<LI><a href="#[30eb578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Receive6Bytes
<LI><a href="#[30eb5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte
</UL>

<P><STRONG><a name="[30eb62c]"></a>ANBT_I2C_SendByte</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>

<P><STRONG><a name="[30eb5f0]"></a>ANBT_I2C_ReceiveByte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ANBT_I2C_ReceiveByte &rArr; ANBT_I2C_SendNACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>

<P><STRONG><a name="[30eb5b4]"></a>ANBT_I2C_ReceiveByte_WithACK</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>

<P><STRONG><a name="[30eb578]"></a>ANBT_I2C_Receive6Bytes</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, anbt_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>

<P><STRONG><a name="[30eb53c]"></a>ANBT_I2C_Receive12Bytes</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, anbt_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>

<P><STRONG><a name="[30eb500]"></a>ANBT_I2C_Receive14Bytes</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, anbt_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25daf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25daf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[25db050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[30eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendNACK
<LI><a href="#[30eb6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendACK
<LI><a href="#[30eb758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_Delay
</UL>

<P><STRONG><a name="[30eb4c4]"></a>AnBT_DMP_Delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, anbt_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ebd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_ms
</UL>

<P><STRONG><a name="[30ebd70]"></a>AnBT_DMP_Delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AnBT_DMP_Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[30eb4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[30ec004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[30ec838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[30ebcf8]"></a>AnBT_DMP_I2C_Write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30eb62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendByte
<LI><a href="#[30eb6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_STOP
<LI><a href="#[30eb71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[25ce288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[25ce2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[25ce33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[30ebfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[30ec004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[30ec040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[30ec07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[30ec0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[30ec130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[30ec16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[30ec1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[30ec838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[30ec874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>

<P><STRONG><a name="[30ebd34]"></a>AnBT_DMP_I2C_Read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, anbt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[30eb5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte_WithACK
<LI><a href="#[30eb5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_ReceiveByte
<LI><a href="#[30eb62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_SendByte
<LI><a href="#[30eb6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_STOP
<LI><a href="#[30eb71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANBT_I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[25ce300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
<LI><a href="#[30ec004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[30ec838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[30eaab0]"></a>__aeabi_ldivmod</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30e8d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30ec838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[30ea984]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25ce5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[25ce60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[30ea81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[30ea8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[30ea948]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30ea90c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30ea8d0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30ea984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_DEV_CFG
</UL>

<P><STRONG><a name="[30ea894]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30ea858]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30ea81c]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30ea984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30ea72c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[25d10f0]"></a>__aeabi_fadd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_fadd &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
</UL>

<P><STRONG><a name="[25d103c]"></a>__aeabi_fsub</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_fsub &rArr; _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[30ea600]"></a>__aeabi_frsub</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30ea63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[25d1078]"></a>__aeabi_fmul</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>

<P><STRONG><a name="[25d10b4]"></a>__aeabi_fdiv</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_fdiv &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[25cf908]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[30e9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[30eb104]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __aeabi_dsub &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[30eb140]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __aeabi_drsub &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[25d1168]"></a>__aeabi_dmul</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30e9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[25cf8cc]"></a>__aeabi_ddiv</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[25d1000]"></a>__aeabi_i2f</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[25cf854]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
</UL>

<P><STRONG><a name="[30ebc80]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ec748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[25ce42c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25ce8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[25d112c]"></a>__aeabi_f2d</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[30ebcbc]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[25d11a4]"></a>__aeabi_d2f</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
</UL>

<P><STRONG><a name="[25d1258]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[25d121c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[25d11e0]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
<LI><a href="#[30ec784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[30e8d64]"></a>__aeabi_uldivmod</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30e8b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30e8c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[30eaab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[30e8c74]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e8d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30ea36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[30e8c38]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[30e8b48]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e8d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30e9250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[30ea36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[30e8b0c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30e874c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[30e865c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30e865c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30e865c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[30ea5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[30ea5c4]"></a>_float_epilogue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30e865c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25cf854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25d1000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25d10b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[25d11a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[30ea63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[30e856c]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30ea2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[30ea2b8]"></a>_double_epilogue</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30e856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25cf8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25d1168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30e9250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[30ea36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[30eb1b8]"></a>__ARM_scalbn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[30e847c]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[30e838c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30e8f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[30e8fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[30e8350]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[30e9250]"></a>_dsqrt</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _dsqrt &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30e8b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30ea2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30e92c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[30e80bc]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[30e928c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e92c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[30e9520]"></a>__kernel_poly</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25cf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25d1168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[30e7e28]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[30e7dec]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[30e7db0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[30e8800]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[30e92c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[30eb1f4]"></a>asin</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25cf8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25cf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25d1168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30e8800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30e92c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[30e9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[30eb104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[30eb140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[30eb1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[30ebcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
</UL>

<P><STRONG><a name="[30e9778]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25cf8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25cf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25d1168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30e9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[30eb104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[30eb140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[30eb1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[30ebcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[30eaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[30eaeac]"></a>atan2</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25cf8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25cf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[30e8800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30e9778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[30eb104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[30eb140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_angles
</UL>

<P><STRONG><a name="[30e92c8]"></a>sqrt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30e8800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30e9250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[30e928c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[30eb1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25d87c4]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[25d6b2c]"></a>TI4_Config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d6af0]"></a>TI3_Config</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d6ab4]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d6334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[25d66b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25d6a78]"></a>TI1_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d6334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[25d66b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[25d66f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[25cef6c]"></a>decode_gesture</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, anbt_dmp_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[25d0f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[30ec874]"></a>set_int_enable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_int_enable &rArr; AnBT_DMP_I2C_Write &rArr; ANBT_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[30ec0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[30ec838]"></a>get_st_biases</STRONG> (Thumb, 1308 bytes, Stack size 96 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_st_biases &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30eaab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[30ebcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Write
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
<LI><a href="#[30ebd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ec7fc]"></a>get_accel_prod_shift</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_accel_prod_shift &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[30ec7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[30ec7c0]"></a>accel_self_test</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = accel_self_test &rArr; get_accel_prod_shift &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25d1000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25d103c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[25d10b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[25d112c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25d11e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[25d121c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[25d1258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[30ebcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[30ec7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ec784]"></a>gyro_self_test</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gyro_self_test &rArr; AnBT_DMP_I2C_Read &rArr; ANBT_I2C_ReceiveByte_WithACK &rArr; ANBT_I2C_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[25cf854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25d1000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25d103c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[25d10b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[25d112c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25d11e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[25d121c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[30ebcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[30ebd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[30ec748]"></a>run_self_test</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = run_self_test &rArr; mpu_run_self_test &rArr; get_st_biases &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25ce378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[25ce990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[25ce9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[25d1000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30ebc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[30ebe24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[30ebe60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[30ec70c]"></a>inv_row_2_scale</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30ec6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[30ec6d0]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, anbt_dmp_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[30ec70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnBT_DMP_MPU6050_Init
</UL>

<P><STRONG><a name="[30ea63c]"></a>_float_addcore</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _float_addcore &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30ea5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25d103c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[25d10f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[30ea600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[30ea36c]"></a>_double_addcore</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30e8b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30e8c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[30ea2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25cf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[30eb104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[30eb140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
